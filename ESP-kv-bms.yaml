# This is the main ESPHome file that will be uploaded to the ESP32.
#
# You should only need to edit a few sections in this file. 'wifi' and 'packages'

# Substitutions are used to make the configuration more dynamic and easier to maintain.
substitutions:
  name: esp-kv-bms00
  short_name: kv-bms00
  external_components_source: "../my_components"
  device_description: "Kilovault BMS Monitor Via BTLE Module: 00"
  throttle_time: 10s

esphome:
  name: ${name}
  comment: ${device_description}

esp32:
  board: nodemcu-32s
  framework:
    type: esp-idf

external_components:
  - source: github://KalebTheMaker/kilovault-esphome-component@main
    refresh: 0s

# WiFi Configuration
# If you do not want to use a static IP, remove the 'manual_ip' section.
# If you are unsure what your 'domain' is, you can remove the complete line. 
# The !secret means that the value is stored in the 'secrets.yaml' file.
wifi:
  networks:
  - ssid: !secret ssid
    password: !secret wifi_password
  manual_ip: 
    static_ip: 172.16.10.66
    gateway: 172.16.10.254
    subnet: 255.255.255.0
    dns1: 172.16.10.10
    dns2: 8.8.8.8
  domain: .bsr.lan

debug:
  update_interval: 5s

# EDIT THIS
# you will need to edit the 'key' value to match the key you have in your 'secrets.yaml' file.
# this name needs to be unique for each ESP device.
api:
  encryption:
    key: !secret key1

ota:
  platform: esphome
  password: !secret ota_password
  on_begin:
    then:
    - switch.turn_off: ble_client_switch01
    - switch.turn_off: ble_client_switch02
    
logger:
  baud_rate: 115200
  level: DEBUG
  logs:
    esp32_ble_tracker: INFO
    esp32_ble_client: INFO
    #jk_bms_ble: INFO
    
time:
  - platform: homeassistant
    id: homeassistant_time

# You will need to edit this section to define the batteries you are monitoring.
# Edit the 'mac_address', 'short_name', and 'battery_id' for each battery.
#    See the github wiki for information on how to get the mac_address of your battery.
# Make sure 'device' is unique for each battery.
packages:
  jk-bms1: !include
    file: kv-bms.yaml
    vars:
      device: '01'
      mac_address: 48:70:1E:13:3A:86
      protocol_version: JK02_32S
      short_name: kvbatt-0338
      battery_id: 0338
  jk-bms2: !include
    file: kv-bms.yaml
    vars:
      device: '02'
      mac_address: 54:4A:16:71:36:AA
      protocol_version: JK02_32S
      short_name: kvbatt-0454
      battery_id: 0454
  jk-bms3: !include
    file: kv-bms.yaml
    vars:
      device: '03'
      mac_address: 50:33:8B:12:63:B1
      protocol_version: JK02_32S
      short_name: kvbatt-0427
      battery_id: 0427
# END PACKAGES ===============================================

binary_sensor:
  - platform: status
    name: "${short_name} Status"
    
sensor:
  - platform: debug
    free:
      name: "${short_name} Heap Free"
    loop_time:
      name: "${short_name} Loop Time"
  - platform: wifi_signal
    name: "${short_name} WiFi Signal"
    update_interval: 60s
  - platform: uptime
    disabled_by_default: true
    name: "${short_name} uptime seconds"
    id: uptime_s

switch:
  - platform: shutdown
    name: "${short_name} Shutdown"
  - platform: safe_mode
    name: "${short_name} Restart (Safe Mode)"
  - platform: restart
    id: restart_device
    name: "${short_name} Restart"

text_sensor:
  - platform: debug
    device:
      name: "${short_name} Device Info"
    reset_reason:
      name: "${short_name} Reset Reason"
  - platform: wifi_info
    ip_address:
      name: "${short_name} IP Address"
    ssid:
      name: "${short_name} SSID"
  - platform: template
    name: "${short_name} uptime"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[60];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
   